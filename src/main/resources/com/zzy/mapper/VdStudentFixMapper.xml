<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzy.mapper.VdStudentFixMapper">
  <resultMap id="BaseResultMap" type="com.zzy.model.po.VdStudentFix">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="stuff" jdbcType="VARCHAR" property="stuff" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="cover" jdbcType="VARCHAR" property="cover" />
    <result column="dorid" jdbcType="INTEGER" property="dorid" />
    <result column="stuid" jdbcType="INTEGER" property="stuid" />
    <result column="process" jdbcType="INTEGER" property="process" />
    <result column="display" jdbcType="INTEGER" property="display" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, stuff, description, cover, dorid, stuid, process, display
  </sql>
  <select id="selectByExample" parameterType="com.zzy.model.po.VdStudentFixExample" resultType="com.zzy.model.dto.VdStudentFixDTO">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from vd_student_fix
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from vd_student_fix
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectInfo"  parameterType="com.zzy.model.vo.VdStudentFixVO" resultType="com.zzy.model.dto.VdStudentFixDTO">
    select
    f.id as id,
    f.stuff as stuff,
    f. description as description,
    f.cover as cover,
    f.dorid as dorid,
    f.stuid as stuid,
    f.process as process,
    f.display as display,
    CONCAT(b.`name`,b.`no`,'号楼',d.dornum) as buildName,
    s.name as stuname
    from vd_student_fix f, vd_stu s, vd_dor d, vd_build b
    where f.stuid = s.id
    and s.dorid = d.id
    and d.bid = b.id
    <if test="dorid != null and dorid != ''">
      and f.dorid = #{dorid,jdbcType=INTEGER}
    </if>
    <if test="stuid != null and stuid != ''">
      and f.stuid = #{stuid,jdbcType=INTEGER}
    </if>
    <if test="process != null and process != ''">
      and f.process = #{process,jdbcType=INTEGER}
    </if>
    <if test="display != null and display != ''">
      and f.display = #{display,jdbcType=INTEGER}
    </if>
    order by f.process asc
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from vd_student_fix
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zzy.model.po.VdStudentFixExample">
    delete from vd_student_fix
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zzy.model.vo.VdStudentFixVO">
    insert into vd_student_fix (stuff, description,
      cover, dorid, stuid,
      process, display)
    values (#{stuff,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},
      #{cover,jdbcType=VARCHAR}, #{dorid,jdbcType=INTEGER}, #{stuid,jdbcType=INTEGER}, 2, 0)
  </insert>
  <insert id="insertSelective" parameterType="com.zzy.model.po.VdStudentFix">
    insert into vd_student_fix
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="stuff != null">
        stuff,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="cover != null">
        cover,
      </if>
      <if test="dorid != null">
        dorid,
      </if>
      <if test="stuid != null">
        stuid,
      </if>
      <if test="process != null">
        process,
      </if>
      <if test="display != null">
        display,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="stuff != null">
        #{stuff,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="cover != null">
        #{cover,jdbcType=VARCHAR},
      </if>
      <if test="dorid != null">
        #{dorid,jdbcType=INTEGER},
      </if>
      <if test="stuid != null">
        #{stuid,jdbcType=INTEGER},
      </if>
      <if test="process != null">
        #{process,jdbcType=INTEGER},
      </if>
      <if test="display != null">
        #{display,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zzy.model.po.VdStudentFixExample" resultType="java.lang.Long">
    select count(*) from vd_student_fix
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update vd_student_fix
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.stuff != null">
        stuff = #{record.stuff,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.cover != null">
        cover = #{record.cover,jdbcType=VARCHAR},
      </if>
      <if test="record.dorid != null">
        dorid = #{record.dorid,jdbcType=INTEGER},
      </if>
      <if test="record.stuid != null">
        stuid = #{record.stuid,jdbcType=INTEGER},
      </if>
      <if test="record.process != null">
        process = #{record.process,jdbcType=INTEGER},
      </if>
      <if test="record.display != null">
        display = #{record.display,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update vd_student_fix
    set id = #{record.id,jdbcType=INTEGER},
      stuff = #{record.stuff,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      cover = #{record.cover,jdbcType=VARCHAR},
      dorid = #{record.dorid,jdbcType=INTEGER},
      stuid = #{record.stuid,jdbcType=INTEGER},
      process = #{record.process,jdbcType=INTEGER},
      display = #{record.display,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzy.model.vo.VdStudentFixVO">
    update vd_student_fix
    <set>
      <if test="stuff != null">
        stuff = #{stuff,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="cover != null">
        cover = #{cover,jdbcType=VARCHAR},
      </if>
      <if test="dorid != null">
        dorid = #{dorid,jdbcType=INTEGER},
      </if>
      <if test="stuid != null">
        stuid = #{stuid,jdbcType=INTEGER},
      </if>
      <if test="process != null">
        process = #{process,jdbcType=INTEGER},
      </if>
      <if test="display != null">
        display = #{display,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzy.model.po.VdStudentFix">
    update vd_student_fix
    set stuff = #{stuff,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      cover = #{cover,jdbcType=VARCHAR},
      dorid = #{dorid,jdbcType=INTEGER},
      stuid = #{stuid,jdbcType=INTEGER},
      process = #{process,jdbcType=INTEGER},
      display = #{display,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
